groups:
- name: django-exceptions
  rules:
  # django 500 response rate by view method (5m)
  - record: floppaverse_http_500_responses_by_view:rate5m
    expr: sum by(view) (rate(django_http_responses_total_by_status_view_method_total{status="500"}[5m]))
  # django views with more than 5% error (500) rates (5m)
  - record: floppaverse_http_views_with_gt_5pc_err_rate:rate5m
    expr: |
      (
        sum by(view) (rate(django_http_responses_total_by_status_view_method_total{status="500"}[5m]))
        /
        sum by(view) (rate(django_http_responses_total_by_status_view_method_total[5m]))
      ) * 100 > 5
  # HTTP request latency rate for each django view (excluding prometheus metric scraping)
  - record: floppaverse_http_request_latency_by_view
    expr: sum by(view) (rate(django_http_requests_latency_seconds_by_view_method_sum[5m]))
  # HTTP request latency rate for each django view (excluding prometheus metric scraping) (bucketed by response time)
  - record: floppaverse_http_request_latency_by_view_bucketed
    expr: sum by(view, lt) (rate(django_http_requests_latency_seconds_by_view_method_bucket{view!="prometheus-django-metrics"}[5m]))

  # Alerts
  - alert: HTTP 500 error rate greater than 5%
    expr: |
      (
        sum by(view) (rate(django_http_responses_total_by_status_view_method_total{status="500"}[5m]))
        /
        sum by(view) (rate(django_http_responses_total_by_status_view_method_total[5m]))
      ) * 100 > 5
    # raise alert if it keeps firing for 1 minute
    for: 1m
    # How long an alert will continue firing after the condition that triggered it
    # has cleared.
    keep_firing_for: 1m
    labels:
      severity: "high"
      alerttype: "webdev"
    annotations:
      summary: "High HTTP 500 for {{ $labels.view }}"
      description: "HTTP 500 rate for view {{ $labels.view }} exceeds 5%: {{ $value }}%"
      suggested_troubleshooting_steps: |
        Debug the affected view locally. Make sure you are running the same branch as the server where the error occurred.
        By doing so you can find out if the error is caused by the view, or if it is a server issue.
        If the issue seems to be a bug in the code, check what recent commits changed the affected view.
        Use commands such as `git blame` and `git bisect` to help you determine which commit introduced the bug.
  - alert: Overall HTTP 500 error rate greater than 5%
    expr: |
      (
        sum by(instance) (rate(django_http_responses_total_by_status_view_method_total{status="500"}[5m]))
        /
        sum by(instance) (rate(django_http_responses_total_by_status_view_method_total[5m]))
      ) * 100 > 5
    for: 1m
    keep_firing_for: 1m
    labels:
      severity: "critical"
      alerttype: "webdev"
    annotations:
      summary: "Overall high HTTP 500 for {{ $labels.view }}"
      description: "Overall HTTP 500 rate for instance {{ $labels.instance }} exceeds 5%: {{ $value }}%"
      suggested_troubleshooting_steps: |
        This alert hints at a significant part of the webapp being inaccessible.
        If the issue appears to be a server/network malfunction, contact the devops team.
        If not, check the branch the build is running on and see if the culprit is a bad commit.
